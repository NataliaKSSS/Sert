////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
// Возвращает пустую строку в том случае, если не удалось сформировать наименование или не заполнены операнды алгоритма.
//
// Параметры:
//	ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры;
//	ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры, СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры -
//	 	номенклатура или характеристика, для которой нужно получить наименование по заданному в настройках шаблону.
//
// Возвращаемое значение:
//	Строка - Наименование полученное по алгоритму расчета
//
Функция НаименованиеПоШаблону (Знач ШаблонНаименования, ОбъектСправочник) Экспорт
	
	ФормулаНаименованияСтруктура = ФормулаНаименования(ШаблонНаименования, ОбъектСправочник);
	ФормулаНаименования = """"" + " + СтрЗаменить(ФормулаНаименованияСтруктура.ФормулаНаименования,
		"МассивЗначенийРеквизитов[",
		"Параметры[");
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(ФормулаНаименования) Тогда
		
		Попытка
			
			Наименование = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
				ФормулаНаименования,
				ФормулаНаименованияСтруктура.МассивЗначенийРеквизитов);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно сформировать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.';
											|en = 'Cannot generate a name according to the ""%ВидНоменклатуры%"" template specified for the item kind. Check whether the template is correct.'");
			
			Если ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.Номенклатура")
			 ИЛИ ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.СерииНоменклатуры") Тогда
				
				ВидНоменклатуры = ОбъектСправочник.ВидНоменклатуры;
				
			Иначе
				
				Если ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСправочник.Владелец, "ВидНоменклатуры");
					
				ИначеЕсли ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
					
					ВидНоменклатуры = ОбъектСправочник.Владелец;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Подставляет в шаблон наименования значения реквизитов.
//
// Параметры:
//  ШаблонНаименования	 - Строка								 - шаблон наименования, заданный в виде номенклатуры
//  ОбъектСправочник	 - СправочникОбъект, СправочникСсылка	 - объект, для которого нужно рассчитать наименование.
// 
// Возвращаемое значение:
//  Структура - Структура с ключами:
//  * ФормулаНаименования - Строка - программный код, который нужно выполнить с помощью функции Выполнить для расчета наименования
//  * МассивЗначенийРеквизитов - Массив - значения реквизитов, используемых в формуле наименования
//  * ИндексыНаименованияВМассивеЗначенийРеквизитов - Массив - массив индексов элементов МассивЗначенийРеквизитов,
//  	которые хранят значение реквизита "Наименование".
//
Функция ФормулаНаименования(Знач ШаблонНаименования, Знач ОбъектСправочник) Экспорт
	
	Результат = Новый Структура(
		"ФормулаНаименования, МассивЗначенийРеквизитов, ИндексыНаименованияВМассивеЗначенийРеквизитов",
		"" + ШаблонНаименования, Новый Массив, Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает параметры выбора для номенклатуры.
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа,
//	ЭлементНоменклатура - ПолеФормы - Поле для ввода номенклатуры,
//	ИспользоватьНаборы - Булево - Истина - признак использования наборов номенклатуры.
//
Процедура УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, ЭлементНоменклатура, ИспользоватьНаборы = Ложь) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	КонецЕсли;
	
	СписокОперацийБезУслуг = СписокХозяйственныхОперацийИсключающихУслуги();
	Если СписокОперацийБезУслуг.НайтиПоЗначению(ХозяйственнаяОперация) = Неопределено Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
	КонецЕсли;
	
	СписокОперацийБезРабот = СписокХозяйственныхОперацийИсключающихРаботы();
	Если СписокОперацийБезРабот.НайтиПоЗначению(ХозяйственнаяОперация) = Неопределено Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	КонецЕсли;
	
	Если ИспользоватьНаборы Тогда
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор"));
	КонецЕсли;
	
	ФиксированныйМассивТиповНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ФиксированныйМассивТиповНоменклатуры));
	
	ЭлементНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораНоменклатуры()

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// с типом "Услуга".
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихУслуги() Экспорт
	
	СписокОпераций = СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// с типом "Работа".
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихРаботы() Экспорт
	
	СписокОпераций = СписокХозяйственныхОперацийИсключающихУслугиИРаботы();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути);
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает список хозяйственных операций в которых не используется номенклатура
// и с типом "Услуга", и с типом "Работа".
//
// Возвращаемое значение:
//	СписокЗначений - список операций.
//
Функция СписокХозяйственныхОперацийИсключающихУслугиИРаботы() Экспорт
	
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути); 
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	//++ НЕ УТКА
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5);
	//++ Устарело_Переработка24
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаДавальцу);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца);
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);
	//-- Устарело_Переработка24

	//-- НЕ УТКА
	
	Возврат СписокОпераций;
	
КонецФункции

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ИменаПолейССуффиксом - Структура - коллекция, содержащая имена рекизитов с суффиксом. Ключом коллекции
//													выступает имя реквизита без суффикса, например "Номенклатура",
//													а значением задается имя реквизита с суффиксом,
//													например "НоменклатураОприходование".
//			* СписокСтрок - Массив Из СтрокаТабличнойЧасти, Неопределено - значение по умолчанию Неопределенно.
//			* ВыводитьНомераСтрок - Булево - значение по умолчанию Истина.
//			* ВыдаватьСообщения - Булево - значение по умолчанию пустая ИСТИНА - если ЛОЖЬ, но не будут выдаваться сообщения, просто выставится Отказ.
//			* ПутьКДаннымТаблицыФормы - Строка - значение по умолчанию "Объект" - путь к реквизиту формы, содержащий проверяемую табличную часть.
//																					Если проверяется таблица, которая сама является реквизитом формы, нужно
//																					передать "" (т.е. пустую строку).
//			* ИмяКолонкиХарактеристикаТаблицыФормы - Строка - значение по умолчанию "Характеристика" - имя колонки таблицы формы, рядом с которой нужно
//																вывести сообщение. Нужно переопределять, когда вместо колонки характеристики отображается какая-то
//																другая колонка, например, с какими-то строковыми представлениями.
//
Функция ПараметрыПроверкиЗаполненияХарактеристик() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",						"Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ",			"");
	ПараметрыПроверки.Вставить("ИменаПолейССуффиксом",		Новый Структура);
	ПараметрыПроверки.Вставить("СписокСтрок",				Неопределено);
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",		Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",		Новый Структура);
	ПараметрыПроверки.Вставить("ВыдаватьСообщения",			Истина);
	ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы",	"Объект");
	ПараметрыПроверки.Вставить("ИмяКолонкиХарактеристикаТаблицыФормы", "Характеристика");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Характеристика" в объектах.
//
// Параметры:
//	Объект  - ДокументОбъект, СправочникОбъект - объект, для которого требуется проверить заполнение колонки "Характеристика" в табличной части;
//			- ФормаКлиентскогоПриложения - объект, для которого требуется проверить заполнение колонки "Характеристика" в табличной части, содержит в том числе:
//				* Ссылка - ДокументСсылка - 
//	МассивНепроверяемыхРеквизитов - Массив - реквизиты, которые не нужно проверять платформенной проверкой;
//	Отказ - Булево - Истина - признак отказа продолжения операции;
//	ПараметрыПроверки - см. НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияХарактеристик();
	КонецЕсли;
	
	ИмяТЧ                 = ПараметрыПроверки.ИмяТЧ;
	ИменаПолейССуффиксом  = ПараметрыПроверки.ИменаПолейССуффиксом;
	СписокСтрок           = ПараметрыПроверки.СписокСтрок;
	ВыводитьНомераСтрок   = ПараметрыПроверки.ВыводитьНомераСтрок;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + ".Характеристика");
	
	Если ИменаПолейССуффиксом.Свойство("Характеристика") Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + "." + ИменаПолейССуффиксом.Характеристика);
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	&ХарактеристикаСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ &ХарактеристикаСуффиксДопРеквизита2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,
	|	&НеЗаполненаХарактеристикаСуффиксДопРеквизита,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
	|																												ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	ИЛИ &НоменклатураСуффиксДопРеквизита2";
	
	
	Если ИменаПолейССуффиксом.Количество() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1", "ТаблицаТоваров." + ИменаПолейССуффиксом.Номенклатура + " КАК " + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХарактеристикаСуффиксДопРеквизита1", "ТаблицаТоваров." + ИменаПолейССуффиксом.Характеристика + " КАК " + ИменаПолейССуффиксом.Характеристика);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХарактеристикаСуффиксДопРеквизита2", "ТаблицаТоваров." + ИменаПолейССуффиксом.Характеристика + " = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаХарактеристикаСуффиксДопРеквизита", "
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками." + ИменаПолейССуффиксом.Номенклатура + " КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками." + ИменаПолейССуффиксом.Характеристика + " = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполнена" + ИменаПолейССуффиксом.Характеристика);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита2", "
		|	ВЫРАЗИТЬ(СтрокиСОшибками." + ИменаПолейССуффиксом.Номенклатура + " КАК Справочник.Номенклатура).ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры),
		|																																		ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками." + ИменаПолейССуффиксом.Характеристика + " = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)");
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ХарактеристикаСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &ХарактеристикаСуффиксДопРеквизита2", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаХарактеристикаСуффиксДопРеквизита,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &НоменклатураСуффиксДопРеквизита2", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(ИменаПолейССуффиксом.Количество(),
							"," + ИменаПолейССуффиксом.Номенклатура + "," + ИменаПолейССуффиксом.Характеристика,
							"");
	
	ОтборСтрокДляПроверки = Неопределено;
	
	Если СписокСтрок = Неопределено
		И ПараметрыПроверки.ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		ОтборСтрокДляПроверки = ПараметрыПроверки.ОтборПроверяемыхСтрок;
	Иначе
		ОтборСтрокДляПроверки = СписокСтрок;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
		Объект[ИмяТЧ].Выгрузить(ОтборСтрокДляПроверки, "НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".';
								|en = 'Column ""%Характеристика%"" in line %НомерСтроки% of the ""%ТаблицаТовары%"" list is not filled in.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%Характеристика%"" в списке ""%ТаблицаТовары%"".';
								|en = 'Column ""%Характеристика%"" in list ""%ТаблицаТовары%"" is not filled in.'");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не ПараметрыПроверки.ВыдаватьСообщения Тогда
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	КонецЕсли;
	
	ПредставлениеТЧ = ?(Не ПараметрыПроверки.Свойство("ПредставлениеТЧ")
							Или Не ЗначениеЗаполнено(ПараметрыПроверки.ПредставлениеТЧ),
						МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним,
						ПараметрыПроверки.ПредставлениеТЧ);
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ПараметрыПроверки.ИмяКолонкиХарактеристикаТаблицыФормы);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
													КлючДанных,
													Поле,
													ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
													Отказ);
		КонецЕсли;
		
		Если ИменаПолейССуффиксом.Свойство("Характеристика")
			И Выборка["НеЗаполнена" + ИменаПолейССуффиксом.Характеристика] Тогда
			
			ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИменаПолейССуффиксом.Характеристика].Синоним;
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ,
																	Выборка.НомерСтроки,
																	ИменаПолейССуффиксом.Характеристика);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
													КлючДанных,
													Поле,
													ПараметрыПроверки.ПутьКДаннымТаблицыФормы,
													Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки заполнения колонок "Содержание" в формах.
//
// Параметры:
//	Объект - ДокументОбъект - объект, для которого требуется проверить заполнение колонки "Содержание" в табличной части;
//	Отказ - Булево - Истина - признак отказа продолжения операции;
//	ИмяТЧ - Строка - имя табличной части в объекте.
//
Процедура ПроверитьЗаполнениеСодержания(Объект, Отказ, ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Содержание = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	СтрокиСОшибками.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Содержание"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();

	ПредставлениеТЧ                 = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;

	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""Содержание"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".';
							|en = 'Column ""Content"" in line  %НомерСтроки% of the ""%ТаблицаТовары%"" list is not filled in.'");

	Пока Выборка.Следующий() Цикл
					
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Содержание");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);

	КонецЦикла;
		
КонецПроцедуры

// Функция определяет наличие в табличной части работ.
//
// Параметры:
//	ТЧ - ДанныеФормыКоллекция - проверяемая табличная часть.
//
// Возвращаемое значение:
//	Структура:
//		* ЕстьРаботы - Булево - Истина - в ТЧ используются работы.
//
Функция ПроверитьНаличиеРабот(ТЧ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ 
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	ИСТИНА КАК ЕстьРаботы
	|ИЗ 
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ 
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры 
	|	= ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТЧ.Выгрузить(, "Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	ТипыНоменклатуры = Новый Структура("ЕстьРаботы", Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипыНоменклатуры.ЕстьРаботы = Истина;
		
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
	
КонецФункции //ПроверитьНаличиеРабот()

// Возвращает параметры проверки заполнения упаковок.
//
//	Возвращаемое значение:
//		Структура - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ИмяПоляУпаковка - Строка - значение по умолчанию "Упаковка".
//			* ВыводитьНомераСтрок - Булево - значение по умолчанию Истина.
//			* ОтборПроверяемыхСтрок - Структура - значение по умолчанию пустая Структура.
//			* ИменаПолейССуффиксом - Структура - коллекция, содержащая имена рекизитов с суффиксом. Ключом коллекции
//													выступает имя реквизита без суффикса, например "Номенклатура",
//													а значением задается имя реквизита с суффиксом,
//													например "НоменклатураОприходование".
//
Функция ПараметрыПроверкиЗаполненияУпаковок() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",					"Товары");
	ПараметрыПроверки.Вставить("ИмяПоляУпаковка",		"Упаковка");
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",	Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок",	Новый Структура);
	ПараметрыПроверки.Вставить("ИменаПолейССуффиксом",	Новый Структура);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет заполнение колонок "Упаковка" в документах по адресному складу. Указание упаковок обязательно для товаров
// и необязательно для многооборотной тары.
//
// Параметры:
//	Объект	- ДокументОбъект, СправочникОбъект - объект, для которого требуется проверить заполнение колонки "Упаковка" в табличной части.
//			- ФормаКлиентскогоПриложения - объект, для которого требуется проверить заполнение колонки "Характеристика" в табличной части, содержит в том числе:
//				* Ссылка - ДокументСсылка - ссылка на документ в информационной базе.
//	МассивНепроверяемыхРеквизитов - Массив Из Строка - реквизиты, которые не нужно проверять платформенной проверкой.
//	Отказ - Булево - Истина - признак отказа продолжения операции.
//	ПараметрыПроверки - см. ПараметрыПроверкиЗаполненияУпаковок
//
Процедура ПроверитьЗаполнениеУпаковок(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиЗаполненияУпаковок();
	КонецЕсли;
	
	ИмяТЧ					= ПараметрыПроверки.ИмяТЧ;
	ИмяПоляУпаковка			= ПараметрыПроверки.ИмяПоляУпаковка;
	ВыводитьНомераСтрок		= ПараметрыПроверки.ВыводитьНомераСтрок;
	ОтборПроверяемыхСтрок	= ПараметрыПроверки.ОтборПроверяемыхСтрок;
	ИменаПолейССуффиксом	= ПараметрыПроверки.ИменаПолейССуффиксом;
	
	Если МассивНепроверяемыхРеквизитов.Найти(ИмяТЧ + "." + ИмяПоляУпаковка) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + "." + ИмяПоляУпаковка);
	
	Если ИменаПолейССуффиксом.Свойство("Упаковка") Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ + "." + ИменаПолейССуффиксом.Упаковка);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	&УпаковкаСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	&ИмяПоляУпаковка					КАК Упаковка
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
	|	&НоменклатураСуффиксДопРеквизита1,
	|	&УпаковкаСуффиксДопРеквизита1,
	|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
	|	&ИмяПоляУпаковка					КАК Упаковка
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТаблицаТоваров.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
	|																												ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
	|	ИЛИ &УпаковкаСуффиксДопРеквизита2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,
	|	&НеЗаполненаУпаковкаСуффиксДопРеквизита,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(СтрокиСОшибками.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|				И ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
	|																																ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаУпаковка
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ИменаПолейССуффиксом.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &УпаковкаСуффиксДопРеквизита2", "
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ТаблицаТоваров.НомерСтроки			КАК НомерСтроки,
		|	&НоменклатураСуффиксДопРеквизита1,
		|	&УпаковкаСуффиксДопРеквизита1,
		|	ТаблицаТоваров.Номенклатура			КАК Номенклатура,
		|	&ИмяПоляУпаковка					КАК Упаковка
		|ИЗ
		|	ВтТаблицаТоваров КАК ТаблицаТоваров
		|
		|ГДЕ
		|	ЕСТЬNULL(ВЫРАЗИТЬ(&УпаковкаСуффиксДопРеквизита3 КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|	И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита2 КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита2 КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
		|																														ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаУпаковкаСуффиксДопРеквизита", "ВЫБОР
		|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(&УпаковкаСуффиксДопРеквизита4 КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины, ЛОЖЬ) <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		|				И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита3 КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|				И ВЫРАЗИТЬ(&НоменклатураСуффиксДопРеквизита3 КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины В(ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук),
		|																																	ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаУпаковка1");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&НоменклатураСуффиксДопРеквизита1",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Номенклатура + " КАК " + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&НоменклатураСуффиксДопРеквизита2",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&НоменклатураСуффиксДопРеквизита3",
									"СтрокиСОшибками." + ИменаПолейССуффиксом.Номенклатура);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УпаковкаСуффиксДопРеквизита1",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Упаковка + " КАК " + ИменаПолейССуффиксом.Упаковка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УпаковкаСуффиксДопРеквизита3",
									"ТаблицаТоваров." + ИменаПолейССуффиксом.Упаковка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&УпаковкаСуффиксДопРеквизита4",
									"СтрокиСОшибками." + ИменаПолейССуффиксом.Упаковка);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИЛИ &УпаковкаСуффиксДопРеквизита2", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УпаковкаСуффиксДопРеквизита1,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НеЗаполненаУпаковкаСуффиксДопРеквизита,", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляУпаковка", "ТаблицаТоваров." + ИмяПоляУпаковка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ИменаДополнительныхРеквизитов = Новый Массив;
	ИменаДополнительныхРеквизитов.Добавить(ИмяПоляУпаковка);
	
	Если ИменаПолейССуффиксом.Количество() > 0 Тогда
		ИменаДополнительныхРеквизитов.Добавить(ИменаПолейССуффиксом.Номенклатура);
		ИменаДополнительныхРеквизитов.Добавить(ИменаПолейССуффиксом.Упаковка);
	КонецЕсли;
	
	ИменаВыгружаемыхРеквизитов = СтрСоединить(ИменаДополнительныхРеквизитов, ", ");
	
	Если ОтборПроверяемыхСтрок.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
									Объект[ИмяТЧ].Выгрузить(ОтборПроверяемыхСтрок, "НомерСтроки, Номенклатура," + ИменаВыгружаемыхРеквизитов));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
									Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Номенклатура, " + ИменаВыгружаемыхРеквизитов));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ТипЗнч(Объект) <> Тип("ФормаКлиентскогоПриложения") Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	Иначе
		МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	КонецЕсли;
	
	Если ВыводитьНомераСтрок Тогда
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%Упаковка%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".';
								|en = 'Column ""%Упаковка%"" in line %НомерСтроки% of the ""%ТаблицаТовары%"" list is not filled in.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%Упаковка%"" в списке ""%ТаблицаТовары%"".';
								|en = 'Column ""%Упаковка%"" in list ""%ТаблицаТовары%"" is not filled in.'");
	КонецЕсли;
	
	ПредставлениеТЧ					= МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаУпаковка	= МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяПоляУпаковка].Синоним;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.НеЗаполненаУпаковка Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщения,	"%Упаковка%",		ПредставлениеРеквизитаУпаковка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%ТаблицаТовары%",	ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%НомерСтроки%",	Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяПоляУпаковка);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ИменаПолейССуффиксом.Свойство("Упаковка")
			И Выборка.НеЗаполненаУпаковка1 Тогда
			
			ПредставлениеРеквизитаУпаковкаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИменаПолейССуффиксом.Упаковка].Синоним;
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения,	"%Упаковка%",		ПредставлениеРеквизитаУпаковкаДоп);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%ТаблицаТовары%",	ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения,	"%НомерСтроки%",	Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИменаПолейССуффиксом.Упаковка);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверки соответствия вида номенклатуры товаров другого качества виду номенклатуры исходного качества.
// Для номенклатуры, по которой ведется учет серий, товары другого качества должны быть одного вида с исходными.
//
// Параметры:
//	Объект - ДокументОбъект - документ, для которого проверяется соответствие номенклатуры;
//	Отказ - Булево - отказ продолжения операции;
//	ИмяТЧДляПроверки - Строка - значение по умолчанию "Товары";
//	ТаблицаДляПроверки - ТаблицаЗначений, Неопределено - если передана таблица значений, то проверяется она, попытка выгрузки из объекта не делается:
//		* НомерСтроки - Число
//		* Номенклатура - СправочникСсылка.Номенклатура
//		* НоменклатураОприходование - СправочникСсылка.Номенклатура.
//
Процедура ПроверитьВидНоменклатурыОприходования(Объект, Отказ, ИмяТЧДляПроверки = "Товары", ТаблицаДляПроверки = Неопределено) Экспорт
	
	// Номенклатура с разным качеством должна быть совместима по настройкам серий:
	// - или у серий должен быть один владелец (тогда настройки учета совпадают)
	// - или учета серий быть не должно.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.НоменклатураОприходование КАК НоменклатураБрак
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.НомерСтроки,
	|	ТоварыДляЗапроса.Номенклатура,
	|	ТоварыДляЗапроса.НоменклатураБрак,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВладелецСерий = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВладелецСерий
	|	КОНЕЦ КАК ВладелецСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВладелецСерий = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВидНоменклатуры
	|		ИНАЧЕ ВЫРАЗИТЬ(ТоварыДляЗапроса.НоменклатураБрак КАК Справочник.Номенклатура).ВладелецСерий
	|	КОНЕЦ КАК ВладелецСерийБрак
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК ТоварыДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.НомерСтроки,
	|	ТоварыДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТоварыДляЗапроса.НоменклатураБрак КАК НоменклатураБрак
	|ИЗ
	|	ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|ГДЕ
	|	ТоварыДляЗапроса.ВладелецСерий <> ТоварыДляЗапроса.ВладелецСерийБрак
	|	И (ТоварыДляЗапроса.ВладелецСерий.ИспользоватьСерии
	|		ИЛИ ТоварыДляЗапроса.ВладелецСерийБрак.ИспользоватьСерии)";
	
	Если ТаблицаДляПроверки <> Неопределено Тогда
		Запрос.УстановитьПараметр("Товары", ТаблицаДляПроверки);
	Иначе
		Запрос.УстановитьПараметр("Товары",
			Объект[ИмяТЧДляПроверки].Выгрузить(,"НомерСтроки,Номенклатура,НоменклатураОприходование"));
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = НСтр("ru = 'По номенклатурам %Номенклатура% и %НоменклатураБрак%(испорченный товар) различаются настройки учета по сериям.';
							|en = 'Settings of batch accounting differ for items %Номенклатура% and %НоменклатураБрак% (spoiled goods).'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НоменклатураБрак%", Выборка.НоменклатураБрак);
		Если ТаблицаДляПроверки = Неопределено Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧДляПроверки,Выборка.НомерСтроки,"НоменклатураОприходование");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект,Поле,,Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает значение коэффициента пересчета единицы измерения в метрические тонны.
// Например, для килограмма коэффициент = 0.001.
//
// Параметры:
//	УпаковкаЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка / единица измерения, 
//		для которой осуществляется пересчет.
//
// Возвращаемое значение:
//	Число - коэффициент.
//
Функция КоэффициентПересчетаВТонны(УпаковкаЕдиницаИзмерения) Экспорт
	
	КоэффициентПересчетаВТонны = 0;
	
	Если НЕ ЗначениеЗаполнено(УпаковкаЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать коэффициент пересчета в тонны, т.к. единица измерения веса не заполнена. Обратитесь к администратору.';
																|en = 'Cannot convert the unit to tons because ""Unit of weight"" is not specified. Please contact the administrator.'"));
		Возврат КоэффициентПересчетаВТонны;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|				И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Вес * УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Числитель / УпаковкиЕдиницыИзмерения.ВесЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ / 1000 КАК КоэффициентПересчетаВТонны
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентПересчетаВТонны = Выборка.КоэффициентПересчетаВТонны;
	КонецЕсли;
	
	Если КоэффициентПересчетаВТонны = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать коэффициент пересчета в тонны для единицы ""%1"". Обратитесь к администратору.';
								|en = 'Cannot calculate ratio of conversion to tons for unit ""%1"". Please contact the administrator.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(УпаковкаЕдиницаИзмерения));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КоэффициентПересчетаВТонны;
	
КонецФункции

// Возвращает значение коэффициента единицы измерения в кубические метры.
//
// Параметры:
//  УпаковкаЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - упаковка / единица измерения,
//  	для которой осуществляется пересчет.
// 
// Возвращаемое значение:
//  Число - коэффициент пересчета.
//
Функция КоэффициентПересчетаВКубическиеМетры(УпаковкаЕдиницаИзмерения) Экспорт
	
	КоэффициентПересчетаВКубическиеМетры = 0;
	
	Если НЕ ЗначениеЗаполнено(УпаковкаЕдиницаИзмерения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать коэффициент пересчета в кубические метры, т.к. единица измерения объема не заполнена. Обратитесь к администратору.';
																|en = 'Cannot convert the unit to cubic meters because ""Unit of volume"" is not specified. Please contact the administrator.'"));
		Возврат КоэффициентПересчетаВКубическиеМетры;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	|				И УпаковкиЕдиницыИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель
	|		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|				И УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Знаменатель <> 0
	|			ТОГДА УпаковкиЕдиницыИзмерения.Объем * УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Числитель / УпаковкиЕдиницыИзмерения.ОбъемЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентПересчетаВКубическиеМетры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &УпаковкаЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("УпаковкаЕдиницаИзмерения", УпаковкаЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоэффициентПересчетаВКубическиеМетры = Выборка.КоэффициентПересчетаВКубическиеМетры;
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось рассчитать коэффициент пересчета в кубические метры для единицы ""%1"". Обратитесь к администратору.';
								|en = 'Cannot calculate a ratio of conversion to cubic meters for unit ""%1"". Please contact the administrator.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Строка(УпаковкаЕдиницаИзмерения));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат КоэффициентПересчетаВКубическиеМетры;
	
КонецФункции
#КонецОбласти
#Область УсловноеОформление

// Устанавливаем условное оформление для назначений номенклатуры
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму 
//		ИмяПоляВводаНазначения - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика".
//		ПутьКПолюОтбораТипНоменклатуры - Строка - Полный путь к реквизиту "Тип номенклатуры",
//									если он отличается от "Объект.Товары.ТипНоменклатуры".
//		ТолькоТовары - Булево - Истина - признак того, что условное оформление применяется только в отношении товаров.
// 
Процедура УстановитьУсловноеОформлениеНазначенияНоменклатуры(Форма,
	                                                            ИмяПоляВводаНазначения = "ТоварыНазначение",
																ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры",
																ТолькоТовары = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Возврат;
	КонецЕсли;
																
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНазначения]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Услуга;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораТипНоменклатуры);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	
	Если ТолькоТовары Тогда
		Текст = НСтр("ru = '<для товаров>';
					|en = '<for goods>'");
	Иначе
		Текст = НСтр("ru = '<для товаров и работ>';
					|en = '<for goods and labor>'");
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
КонецПроцедуры

// Устанавливаем условное оформление для характеристик номенклатуры
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - Содержит данную форму 
// 		ИмяПоляВводаХарактеристики - Строка - Наименование элемента формы, содержащего характеристики номенклатуры,
//											   если оно отличается от "ТоварыХарактеристика".
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "характеристики используются",
//									если он отличается от "Объект.Товары.ХарактеристикиИспользуются".
// 
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма,
	                                                            ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
																ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	Возврат;
КонецПроцедуры

// Устанавливаем условное оформление для серий номенклатуры
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//		ОсобыйВариантУказанияСерий - Булево, Строка - Ложь, если серии указываются в отдельной ТЧ,
//			"СерииВсегдаВТЧТовары" - если у объекта нет специальной ТЧ для указания серий,
//			"СерииПриПланированииОтгрузкиУказываютсяВТЧТовары" - если серии могут указываться в разных ТЧ,
//				при этом серии с политикой учета "При планировании отгрузки" указываются в ТЧ Товары.
//		ИмяПоляВводаСерии - Строка - Наименование элемента формы, содержащего серии номенклатуры,
//									   если оно отличается от "ТоварыСерия".
//		ПутьКПолюОтбораСтатусУказанияСерий - Строка - Полный путь к реквизиту "Статус указания серий",
//														если он отличается от "Объект.Товары.СтатусУказанияСерий".
//		ПутьКПолюОтбораТипНоменклатуры - Строка - Полный путь к реквизиту "Тип номенклатуры",
//														если он отличается от "Объект.Товары.ТипНоменклатуры".
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ОсобыйВариантУказанияСерий,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
														
	Возврат;	
КонецПроцедуры

// Устанавливаем условное оформление для единиц измерения номенклатуры
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
// 		ИмяПоляВводаЕдиницИзмерения - Строка - Наименование элемента формы, содержащего ед. измерения номенклатуры,
//									   			если оно отличается от "ТоварыНоменклатураЕдиницаИзмерения".
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "Упаковка",
//									если он отличается от "Объект.Товары.Упаковка".
//
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
													  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
													  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Дополнительные параметры функции НоменклатураСервер.УстановитьУсловноеОформлениеСодержания.
// 
// Возвращаемое значение:
//   Структура - свойства:
// 		* ИмяПоляВводаСодержания - Строка - Наименование элемента формы "Содержание",
//									   		значение по умолчанию "ТоварыСодержание".
// 		* ИмяПоляВводаУпаковки - Строка - Наименование элемента формы "Упаковка",
//									   		значение по умолчанию "ТоварыУпаковка".
// 		* ПутьКПолюОтбораВариантаОформления - Строка - Полный путь к реквизиту "ВариантОформленияПродажи",
//														значение по умолчанию "Объект.Товары.ВариантОформленияПродажи".
// 		* ПутьКПолюОтбораСодержания - Строка - Полный путь к реквизиту "Содержание",
//												значение по умолчанию "Объект.Товары.Содержание".
//
Функция ДополнительныеПараметрыУстановитьУсловноеОформлениеСодержания() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяПоляВводаСодержания", "ТоварыСодержание");
	ДополнительныеПараметры.Вставить("ИмяПоляВводаУпаковки", "ТоварыУпаковка");
	ДополнительныеПараметры.Вставить("ПутьКПолюОтбораВариантаОформления", "Объект.Товары.ВариантОформленияПродажи");
	ДополнительныеПараметры.Вставить("ПутьКПолюОтбораСодержания", "Объект.Товары.Содержание");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Устанавливаем условное оформление содержания в зависимости от варианта оформления продажи.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для элементов которой осуществляется настройка условного оформления;
//	ДополнительныеПараметры - Структура - описание см. НоменклатураСервер.ДополнительныеПараметрыУстановитьУсловноеОформлениеСодержания.
//
Процедура УстановитьУсловноеОформлениеСодержания(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыУстановитьУсловноеОформлениеСодержания();
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляВводаСодержания]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораВариантаОформления);
	
	СписокТиповВариантыОформленияПродажи = Новый СписокЗначений;
	СписокТиповВариантыОформленияПродажи.Добавить(Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	СписокТиповВариантыОформленияПродажи.Добавить(Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокТиповВариантыОформленияПродажи;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ, оформляемых актом>';
																					|en = '<for works registered with the certificate>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", ПолучитьФункциональнуюОпцию("НеБазоваяВерсия"));
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляВводаСодержания]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораВариантаОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораСодержания);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);	
	
	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ДополнительныеПараметры.ИмяПоляВводаУпаковки]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ДополнительныеПараметры.ПутьКПолюОтбораВариантаОформления);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление номеров ГТД
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
// 		ИмяПоляВводаНомераГТД - Строка - Наименование элемента формы, содержащего номер ГТД,
//									   		если оно отличается от "ТоварыНомерГТД".
// 		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "ВедетсяУчетПоГТД",
//										если он отличается от "Объект.Товары.ВедетсяУчетПоГТД".
//
Процедура УстановитьУсловноеОформлениеНомераГТД(Форма,
												ИмяПоляВводаНомераГТД = "ТоварыНомерГТД",
												ПутьКПолюОтбора = "Объект.Товары.ВедетсяУчетПоГТД") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНомераГТД]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<ГТД не используются>';
																					|en = '<CCD numbers are not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы    = ЭлементыФормы[ИмяПоляВводаНомераГТД]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

// Устанавливаем условное оформление для статусов указания серий
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения - Содержит данную форму
//		СерииВсегдаВТЧТовары - Булево - Истина, если у объекта нет специальной ТЧ для указания серий
//		ИмяПоляВводаСтатусаУказанияСерий - Строка - Наименование элемента формы, содержащего статус указания
//									   				серии номенклатуры,если оно отличается от "ТоварыСтатусУказанияСерий"
//		ПутьКПолюОтбора - Строка - Полный путь к реквизиту "СтатусУказанияСерий",
//									если он отличается от "Объект.Товары.СтатусУказанияСерий".
//
Процедура УстановитьУсловноеОформлениеСтатусовУказанияСерий(Форма,
															СерииВсегдаВТЧТовары,	
													  		ИмяПоляВводаСтатусаУказанияСерий = "ТоварыСтатусУказанияСерий",
													 		ПутьКПолюОтбора = "Объект.Товары.СтатусУказанияСерий") Экспорт
	
	Если СерииВсегдаВТЧТовары Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Возврат;
		КонецЕсли;												
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад") Тогда
		Возврат;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляВводаСтатусаУказанияСерий]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);	
	
КонецПроцедуры

#КонецОбласти

