 
#Область ПрограммныйИнтерфейс
Процедура ДополнениеСтруктурыРеквизитами(СтруктураJson,Объект,ТаблицаМетаданных) ЭКСПОРТ
	Для Каждого Реквизит Из ТаблицаМетаданных Цикл
		Если ЭтоПростойТип(ТипЗнч(Объект[Реквизит.Имя])) Тогда
			СтруктураJson.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]); 
		ИначеЕсли ЭтоПеречисление(ТипЗнч(Объект[Реквизит.Имя])) Тогда
			ЗначениеПеречисления = Объект[Реквизит.Имя];	
			СтруктураJson.Вставить(Реквизит.Имя,ПеречислениеДляСтруктуры(ЗначениеПеречисления));   
		ИначеЕсли ЭтоСправочник(ТипЗнч(Объект[Реквизит.Имя])) Тогда		
			СтруктураJson.Вставить(Реквизит.Имя,СправочникДляСтруктуры(Объект[Реквизит.Имя]));		
		Иначе
			ЗаписьЖурналаРегистрации("Rabbit.Информация. Не определен тип реквизита "+Реквизит.Имя +" "+ТипЗнч(Объект[Реквизит.Имя]),УровеньЖурналаРегистрации.Ошибка);
		КонецЕсли;
	КонецЦикла;   	
КонецПроцедуры   

Процедура ДополнениеСтруктурыДаннымиТабличныхЧастей(СтруктураJson,Объект,ТаблицаМетаданных) ЭКСПОРТ

	Для Каждого ТабличнаяЧасть Из ТаблицаМетаданных Цикл
			МассивСтрокТабличнойЧасти = Новый Массив;
			
			Для Каждого Строка Из Объект[ТабличнаяЧасть.Имя] Цикл 
				СтруктураСтрокиТабличнойЧасти = Новый Структура;
				Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл					
					Если ЭтоПростойТип(ТипЗнч(Строка[РеквизитТабличнойЧасти.Имя])) Тогда
						СтруктураСтрокиТабличнойЧасти.Вставить(РеквизитТабличнойЧасти.Имя, Строка[РеквизитТабличнойЧасти.Имя]); 
					ИначеЕсли ЭтоПеречисление(ТипЗнч(Строка[РеквизитТабличнойЧасти.Имя])) Тогда    
						ЗначениеПеречисления = Строка[РеквизитТабличнойЧасти.Имя];
						Если Не ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
							Продолжить;
						КонецЕсли;
						СтруктураСтрокиТабличнойЧасти.Вставить(РеквизитТабличнойЧасти.Имя,ПеречислениеДляСтруктуры(ЗначениеПеречисления));  
					ИначеЕсли ЭтоСправочник(ТипЗнч(Строка[РеквизитТабличнойЧасти.Имя])) Тогда	
						СтруктураСтрокиТабличнойЧасти.Вставить(РеквизитТабличнойЧасти.Имя,СправочникДляСтруктуры(Строка[РеквизитТабличнойЧасти.Имя]));
					ИначеЕсли ЭтоПланВидовХарактеристик(ТипЗнч(Строка[РеквизитТабличнойЧасти.Имя])) Тогда
						СтруктураСтрокиТабличнойЧасти.Вставить(РеквизитТабличнойЧасти.Имя,ПланВидовХарактеристикДляСтруктуры(Строка[РеквизитТабличнойЧасти.Имя]));
					Иначе
						ЗаписьЖурналаРегистрации("Rabbit.Информация. Не определен тип реквизита "+РеквизитТабличнойЧасти.Имя +" "+ТипЗнч(Строка[РеквизитТабличнойЧасти.Имя]),УровеньЖурналаРегистрации.Ошибка);	
					КонецЕсли;		
				КонецЦикла;
				МассивСтрокТабличнойЧасти.Добавить(СтруктураСтрокиТабличнойЧасти);
			КонецЦикла;
			СтруктураJson.Вставить(ТабличнаяЧасть.Имя, МассивСтрокТабличнойЧасти);
			
		КонецЦикла;

	
КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
Функция ОбменСКроликомВозможен() ЭКСПОРТ
    ОбменВозможен = Истина;   
	Если НЕ Константы.TrierRabbitMQИспользоватьОбменСКроликом.Получить() Тогда
		Возврат Ложь;
	КонецЕсли;
	Если TrierRabbitMQОбщийМодульВызовСервера.ПолучитьСтруктуруАдресаИБ().ИмяБазы <> Константы.TrierRabbitMQИдентификаторБазы.Получить() Тогда
		ЗаписьЖурналаРегистрации("Рассинхронизация идентификаторов ИБ. Обмен с кроликом выполнен не будет",УровеньЖурналаРегистрации.Ошибка);
		Возврат Ложь;
	КонецЕсли;

	Возврат ОбменВозможен;
КонецФункции

Процедура РегистрацияОбъектаКОтправке(Объект) ЭКСПОРТ
	Если НЕ ОбменСКроликомВозможен() Тогда
		Возврат;
	КонецЕсли;
    
	Если Объект.ДополнительныеСвойства.Свойство("НеОтправлятьКролику") Тогда
		Возврат;
	КонецЕсли;  
	ИмяТипаОбъекта = XMLТип(ТипЗнч(Объект.Ссылка)).ИмяТипа;
	Если Не ЗначениеЗаполнено(РегистрыСведений.TrierRabbitMQСинхронизируемыеОбъекты.Получить(Новый Структура("ИмяТипаОбъекта, НаправлениеСинхронизации",ИмяТипаОбъекта, Перечисления.TrierRabbitMQПеречислениеНаправленияСинхронизации.Исходящая)).ТочкаОбмена) Тогда
		Возврат;	
	КонецЕсли;	
	ЗаписьКОтправке = РегистрыСведений.TrierRabbitMQОбъектыКОтправке.СоздатьМенеджерЗаписи();
	ЗаписьКОтправке.Объект = Объект.Ссылка;
	ЗаписьКОтправке.Записать(Истина);

КонецПроцедуры
 
Функция ПоискПоРСПубличныеИдентификаторыОбъектов(Идентификатор, ИмяТипаОбъекта) ЭКСПОРТ 
	Если НЕ ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КИС_ПубличныеИдентификаторыОбъектов.Ссылка
	|ИЗ
	|	РегистрСведений.КИС_ПубличныеИдентификаторыОбъектов КАК КИС_ПубличныеИдентификаторыОбъектов
	|ГДЕ
	|	КИС_ПубличныеИдентификаторыОбъектов.Идентификатор = &Идентификатор
	|	И КИС_ПубличныеИдентификаторыОбъектов.ИмяТипаОбъекта = &ИмяТипаОбъекта";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ИмяТипаОбъекта",ИмяТипаОбъекта);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура ЗаписьВРСПубличныеИдентификаторыОбъектов(ПубличныйИдентификатор, Ссылка) ЭКСПОРТ
	
	ЗаписьРегистра = РегистрыСведений.КИС_ПубличныеИдентификаторыОбъектов.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Идентификатор = ПубличныйИдентификатор;
	ЗаписьРегистра.Ссылка = Ссылка; 
	ЗаписьРегистра.ИмяТипаОбъекта = XMLТип(ТипЗнч(Ссылка)).ИмяТипа;
	ЗаписьРегистра.Записать(Ложь);
	
КонецПроцедуры 

Функция НазначениеСвойствИКатегорийОбъектов(ИмяПредопределенногоНабора)  ЭКСПОРТ
	Если Не ЗначениеЗаполнено(ИмяПредопределенногоНабора) Тогда
		Возврат Неопределено;
	КонецЕсли;     
	ИмяПредопределенногоНабора = СтрЗаменить(ИмяПредопределенногоНабора,"_Общие","");
	Если ИмяПредопределенногоНабора = "Документ_ЗаказКлиента" Тогда
		Возврат "Документ_ЗаказПокупателя";
	КонецЕсли;
	Если Лев(ИмяПредопределенногоНабора,9) = "Документ_" Тогда
		Возврат "Документы";
	КонецЕсли;  
	Если ИмяПредопределенногоНабора = "Справочник_ХарактеристикиНоменклатуры" Тогда
		Возврат "Справочник_ХарактеристикиНоменклатуры";
	КонецЕсли; 
	Если ИмяПредопределенногоНабора = "Справочник_ДоговорыКонтрагентов" Тогда
		Возврат "Справочник_ДоговорыКонтрагентов";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_Должности" Тогда
		Возврат "Справочник_ДолжностиОрганизаций";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_КонтактныеЛицаПартнеров" Тогда
		Возврат "Справочник_КонтактныеЛицаКонтрагентов";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_Контрагенты" Тогда
		Возврат "Справочник_Контрагенты";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_НематериальныеАктивы" Тогда
		Возврат "Справочник_НематериальныеАктивы";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_Номенклатура" Тогда
		Возврат "Справочник_Номенклатура";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_Организации" Тогда
		Возврат "Справочник_Организации";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_ПодразделенияОрганизаций" Тогда
		Возврат "Справочник_ПодразделенияОрганизаций";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_Склады" Тогда
		Возврат "Справочник_Склады";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_Сотрудники" Тогда
		Возврат "Справочник_СотрудникиОрганизаций";
	КонецЕсли;
	Если ИмяПредопределенногоНабора = "Справочник_ФизическиеЛица" Тогда
		Возврат "Справочник_ФизическиеЛица";    	
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 
Функция ПланВидовХарактеристикДляСтруктуры(ЗначениеПланаВХ) 
	
	ПоляПоиска = Новый Структура;
						ПоляПоиска.Вставить("Код",ЗначениеПланаВХ.Код);
						ПоляПоиска.Вставить("Наименование",ЗначениеПланаВХ.Наименование);
						ПоляПоиска.Вставить("УникальныйИдентификатор",ЗначениеПланаВХ.УникальныйИдентификатор());
	
	Возврат ПоляПоиска;
КонецФункции

Функция СправочникДляСтруктуры(ЗначениеСправочника) 
	
	ПоляПоиска = Новый Структура;
						ПоляПоиска.Вставить("Код",ЗначениеСправочника.Код);
						ПоляПоиска.Вставить("Наименование",ЗначениеСправочника.Наименование);
						ПоляПоиска.Вставить("УникальныйИдентификатор",ЗначениеСправочника.УникальныйИдентификатор());
	
	Возврат ПоляПоиска;
КонецФункции

Функция ПеречислениеДляСтруктуры(ЗначениеПеречисления)
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя; 
	Возврат ИмяЗначенияПеречисления;
КонецФункции		

Функция ЭтоПростойТип(ТипЗначения)
	Если ТипЗначения = Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	Если ТипЗначения = Тип("Булево") Тогда
		Возврат Истина;
	КонецЕсли;
	Если ТипЗначения = Тип("Дата") Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ЭтоПеречисление(ТипЗначения) 
	Если Найти(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя(),"Перечисление.")>0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ЭтоСправочник(ТипЗначения)	
	Если Найти(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя(),"Справочник.")>0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции 

Функция ЭтоПланВидовХарактеристик(ТипЗначения)   
	Если Найти(Метаданные.НайтиПоТипу(ТипЗначения).ПолноеИмя(),"ПланВидовХарактеристик.")>0 Тогда
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;	
КонецФункции

#КонецОбласти


#Область ПереходныеФункции
Функция СтранаРегистрацииПоРеквизитам(РеквизитыСтраныРегистрации) ЭКСПОРТ 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторСтранМира.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Код = &Код
	|	И КлассификаторСтранМира.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", РеквизитыСтраныРегистрации.Наименование); 
	Запрос.УстановитьПараметр("Код", РеквизитыСтраныРегистрации.Код); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
	
КонецФункции  

Функция РодительПоНаименованию(НаименованиеРодителя) ЭКСПОРТ 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Первые 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ЭтоГруппа
	|	И Контрагенты.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеРодителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
	
КонецФункции  
  
Функция ПоискКонтрагентаПоРегНомеру(РегистрационныйНомер) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.РегистрационныйНомер = &РегистрационныйНомер";
	
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПоискКонтрагентаПоНаименованиюПолному(НаименованиеПолное) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(НаименованиеПолное) Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НаименованиеПолное ПОДОБНО &НаименованиеПолное";
	
	Запрос.УстановитьПараметр("НаименованиеПолное", НаименованиеПолное);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПоискКонтрагентаПоИННКПП(ИНН, КПП) ЭКСПОРТ
	Если НЕ ЗначениеЗаполнено(ИНН+КПП) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПоискРасчетногоСчетаПоНомеруСчетаИВладельцу(НомерСчета,Владелец) ЭКСПОРТ
    Если Не ЗначениеЗаполнено(НомерСчета) Тогда Возврат Неопределено; КонецЕсли;
	Если Не ЗначениеЗаполнено(Владелец) Тогда Возврат Неопределено; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;

	
КонецФункции

Функция ПоискДоговораПоНаименованиюНомеруДатеИВладельцу(Номер,Дата,Наименование,Владелец) ЭКСПОРТ
    Если Не ЗначениеЗаполнено(Номер) Тогда Возврат Неопределено; КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда Возврат Неопределено; КонецЕсли;
	Если Не ЗначениеЗаполнено(Наименование) Тогда Возврат Неопределено; КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Владелец
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов.Дата = &Дата";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Номер", Номер); 
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции
#КонецОбласти
