
#Область ПрограммныйИнтерфейс

#Область ИнтерактивныеДействия

// Вызывается при выборе даты актуальности или даты события.
// Изменяет значение даты актуальности или даты события в зависимости от выбранного значения.
//
// Параметры:
//	ВыбранноеЗначение - Строка - выбранное значение отбора.
//	СтандартнаяОбработка - Булево - флаг стандартной обработки события.
//	Форма - ФормаКлиентскогоПриложения - форма списка документов.
//	Список - ДинамическийСписок - список документов.
//	ИмяРеквизитаАктуальность - Строка - имя реквизита строки отбора по актуальности.
//	ИмяРеквизитаДатаСобытия - Строка - имя реквизита даты, на которую документ будет просрочен.
//
Процедура ПриВыбореОтбораПоАктуальности(ВыбранноеЗначение, СтандартнаяОбработка, Форма, Список, ИмяРеквизитаАктуальность, ИмяЭлементаАктуальность, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если ВыбранноеЗначение = "ИстекаетНаДату" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаАктуальность", ИмяРеквизитаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяЭлементаАктуальность", ИмяЭлементаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаДатаСобытия", ИмяРеквизитаДатаСобытия);
		
		ПоясняющийТекст = НСтр("ru = 'Выберите дату для вывода просроченных документов:';
								|en = 'Select a date to display overdue documents:'") + " ";
		ПараметрыФормы = Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст);
		Оповещение = Новый ОписаниеОповещения("ПриВыбореОтбораПоАктуальностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборДаты",
			ПараметрыФормы, , , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
		
	Иначе
		ДатаСобытия = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает диалог ввода даты. В случае ввода пустой даты - предлагает повторный диалог ввода даты.
//
// Параметры:
//	Дата - Дата - начальное значение даты диалога. В эту дату будет помещен результат диалога.
//	Подсказка - Строка - текст заголовка диалога ввода даты.
//	ЧастьДаты - ЧастиДаты - вариант использования значения типа 'Дата'.
//	ОповещениеОВыборе - ОписаниеОповещения - описание оповещения после выбора даты.
//
Процедура ВвестиДатуСКонтролемПустогоЗначения(Дата, Подсказка, ЧастьДаты, ОповещениеОВыборе) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата", Дата);
	ДополнительныеПараметры.Вставить("Подсказка", Подсказка);
	ДополнительныеПараметры.Вставить("ЧастьДаты", ЧастьДаты);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе", ОповещениеОВыборе);
	
	Оповещение = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПоказатьВводДаты(Оповещение, Дата, Подсказка, ЧастьДаты);
	
КонецПроцедуры

// Открывает форму ввода даты.
// Дата должна быть не пустая и в пределах указанного периода.
//
// Параметры:
//	Дата - Дата - начальное значение даты диалога.
//	Подсказка - Строка - заголовок диалога ввода даты.
//	ЧастьДаты - ЧастиДаты - вариант использования значения типа 'Дата'.
//	ОповещениеОВыборе - ОписаниеОповещения - описание оповещения после выбора даты.
//	НачалоПериода - Дата - начало периода, в котором должна быть дата.
//	КонецПериода - Дата - конец периода, в котором должна быть дата.
//
Процедура ПоказатьВыборДаты(Дата, Подсказка, ЧастьДаты, ОповещениеОВыборе, НачалоПериода = '000101010000', КонецПериода = '000101010000') Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Дата);
	ПараметрыФормы.Вставить("Подсказка", Подсказка);
	ПараметрыФормы.Вставить("ЧастьДаты", ЧастьДаты);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода", КонецПериода);
	
	ОткрытьФорму("ОбщаяФорма.ВводДаты", ПараметрыФормы,,,,, ОповещениеОВыборе);
	
КонецПроцедуры

// Обработчик команды "Изменить"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура ИзменитьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Скопировать"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура СкопироватьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элемент = ТекущиеДанные.Ссылка;
				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент);
		
		ИмяФормыОбъекта = ОбщегоНазначенияУТВызовСервера.ПолноеИмяФормыОбъекта(Элемент);
				
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - форма элемента или документа.
// Возвращаемое значение:
// 		Булево - признак отказа выполнения дальнейших действий.
Функция ПриДействииСЭлементомЗависящимОтСтатуса(Форма) Экспорт
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение = Истина;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Согласован") Тогда
		Форма.Объект.Согласован = Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Служебная процедура.
//
Процедура КонтрольНеСогласованныхИзмененийВызватьИсключение(Форма, Элемент) Экспорт
	ВызватьИсключение НСтр("ru = 'Внутренняя ошибка подсистемы контроля несогласованных изменений.';
							|en = 'Internal error of the subsystem for unapproved change control.'");
КонецПроцедуры

// Вызывается в формах документов и справочников для отказа от изменения значения реквизита.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента или документа
// 	Элемент - ПолеФормы - Элемент формы
// 	ОбработанныеЭлементы - Массив - Служебное, содержит массив уже обработанных элементов
//
Процедура ВернутьПредыдущееЗначениеРеквизита(Форма, Элемент, ОбработанныеЭлементы = Неопределено) Экспорт
	
	Если ОбработанныеЭлементы = Неопределено Тогда
		ОбработанныеЭлементы = Новый Массив;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Данные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента];
		ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Если Не Таблица.ТекущиеДанные = Неопределено Тогда
				Таблица.ТекущиеДанные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяТаблицы][СтрокаМассива];
			КонецЕсли;
			Прервать;
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СвязиПараметровВыбора = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.СвязиПараметровВыбора.Получить(ПутьКДанным);
	Если Не СвязиПараметровВыбора = Неопределено Тогда
		Для Каждого СвязьПараметровВыбора Из СвязиПараметровВыбора Цикл
			Если ОбработанныеЭлементы.Найти(СвязьПараметровВыбора) = Неопределено Тогда
				ОбработанныеЭлементы.Добавить(СвязьПараметровВыбора);
				ВернутьПредыдущееЗначениеРеквизита(Форма, Форма.Элементы[СвязьПараметровВыбора], ОбработанныеЭлементы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в формах документов и справочников для сохранения предыдущего значения элемента.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента или документа
// 	Элемент - ПолеФормы - Элемент формы.
//
Процедура СохранитьЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Возврат;
		Иначе
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента] = Данные[СтрокаМассива];
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента или документа.
//
Процедура ПослеИзмененияРеквизитаЗависящегоОтСтатуса(Форма) Экспорт
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОповещениеПользователейПриИзменении

// Процедура показывает оповещение после обработки статусов выделенных в списке документов.
//
// Параметры:
//	СписокДокументов  - ТаблицаФормы - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных документов
//	КоличествоВсего - Число - количество выделенных в списке документов
//	Статус - Строка - устанавливаемый статус.
//
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокДокументов <> Неопределено Тогда
			СписокДокументов.Обновить();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""';
								|en = 'Status ""%Статус%"" is set for %КоличествоОбработанных% out of %КоличествоВсего% documents selected in the list'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru = 'Статус ""%Статус%"" установлен';
								|en = 'Status ""%Статус%"" is set'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);

	Иначе
		
		ТекстСообщения = НСтр("ru = 'Статус ""%Статус%"" не установлен ни для одного документа.';
								|en = 'Status ""%Статус%"" is not set for any document.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru = 'Статус ""%Статус%"" не установлен';
								|en = 'Status ""%Статус%"" is not set'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура завершения для ВвестиДатуСКонтролемПустогоЗначения().
// Выполняет оповещение пользователя об осуществленном корректном вводе даты, в противном случае выводится 
// сообщение о том, что значение даты не было заполнено и предлагается выполнить повторный ввод.
//
// Параметры:
//	ВыбраннаяДата - Дата - введенное пользователем значение даты в результате диалога.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
	Иначе
		Если ВыбраннаяДата <> Дата('00010101000000') Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбраннаяДата);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения", ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьПредупреждение(Оповещение, НСтр("ru = 'Поле ""Дата"" не заполнено';
													|en = '""Date"" is required'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура завершения для ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора().
// Выполняет оповещение пользователя о том, что значение даты не было заполнено и предлагается выполнить повторный ввод.
//
// Параметры:
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ВвестиДатуСКонтролемПустогоЗначения(ДополнительныеПараметры.Дата, ДополнительныеПараметры.Подсказка,
		ДополнительныеПараметры.ЧастьДаты, ДополнительныеПараметры.ОповещениеОВыборе);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПриНачалеРаботыСистемы.
//
// см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы 
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПланГлобальногоПоиска = ГлобальныйПоиск.ПолучитьПлан();
	ПланГлобальногоПоиска.Добавить("НайтиДокументВРеестре", "ОбщегоНазначенияУТ", Истина, , 5);
	ГлобальныйПоиск.УстановитьПлан(ПланГлобальногоПоиска);
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиента.ЗадатьВопросОПереходеНаОнлайнВзаиморасчеты Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да';
													|en = 'Yes'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сейчас';
													|en = 'Maybe later'"));
		Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Нет';
															|en = 'No'"));
		ОбработчикОтвета = Новый ОписаниеОповещения("ЗавершениеВопросаОПереходе", ОбщегоНазначенияУТКлиент);
		ТекстВопроса = НСтр("ru = 'Рекомендуется перейти на новый режим «онлайн» учета взаиморасчетов. 
			|Это ускорит печать документов и откроет новые возможности в отчетах. 
			|Выполнить переход?';
			|en = 'Switching to the new online settlements accounting mode is recommended. 
			|This will speed up printing of documents and unlock new features in reports. 
			|Do you want to switch?'");
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, Кнопки);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие выделенных в списке строк.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Булево - Ложь - в списке нет выделенных строк.
//
Функция ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
										|en = 'Cannot execute this command for the specified object.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие выделенных в списке строк и возвращает массив их ссылок.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Массив - массив ссылок выделенных в списке строк.
//
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта!';
										|en = 'Cannot execute this command for the specified object.'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Проверяет наличие записей в списке.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//	ПредставлениеСписка - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Булево - Истина - список содержит записи.
//
Функция ПроверитьНаличиеСтрокВСписке(Список, ПредставлениеСписка) Экспорт
	
	Если Список.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""%ПредставлениеСписка%""';
								|en = 'No line is entered into the ""%ПредставлениеСписка%"" list'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСписка%", ПредставлениеСписка);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, выбрано ли распоряжение для оформления накладной
//
// Параметры:
//  ТекущиеСтроки		 - 	ДанныеФормыСтруктура, Массив - массив идентификаторов выделенных строк, либо текущие данные выделенной строки.
//  ПараметрыЖурнала	 - 	Структура - структура с параметрами журнала (рабочего места).
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ВыбраныДокументыКОформлению(ТекущиеСтроки, ПараметрыЖурнала) Экспорт
	
	Если Не ТипЗнч(ТекущиеСтроки) = Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		Если Не ТекущиеСтроки = Неопределено Тогда
			МассивСтрок.Добавить(ТекущиеСтроки);
		КонецЕсли;
	Иначе
		МассивСтрок = ТекущиеСтроки;
	КонецЕсли;
	
	Если Не МассивСтрок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоказатьВопросНеВыбраноРаспоряжение(ПараметрыЖурнала);
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму обработки (журнала)
//
// Параметры:
//  Параметры	 - Структура	 - структура, один из ключей которой  "ИмяРабочегоМеста".
//
Процедура ОткрытьЖурнал(Параметры) Экспорт
	
	ОткрытьФорму("Обработка." + Параметры.ИмяРабочегоМеста + ".Форма", Параметры);
	
КонецПроцедуры

// Сохраняет в реквизит КэшДанныхМеханизмов формы данные, необходимые для работы механизма.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма
// 	ИмяМеханизма - Строка - Имя механизма, который сохраняет данные
// 	ДанныеДляКэширования - Произвольный - Кэшируемые данные
//
Процедура СохранитьДанныеМеханизмаВКэшФормы(Форма, ИмяМеханизма, ДанныеДляКэширования) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшДанныхМеханизмов") Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Форма.КэшДанныхМеханизмов);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.КэшДанныхМеханизмов = Новый Структура;
	КонецЕсли;
	Форма.КэшДанныхМеханизмов.Вставить(ИмяМеханизма, ДанныеДляКэширования);
	
КонецПроцедуры

// Открывает форму после того, как проверит, что данные в форме-владельце не модифицированы
//  Если данные модифицированы - задается вопрос и данные записываются в форме-владельце.
//  Потом открывается форма.
//
// Параметры:
//  ИмяФормы - Строка -
//  ПараметрыФормы  - Структура -
//  ФормаВладелец - ФормаКлиентскогоПриложения - 
//  РежимОткрытияФормы - Строка - значение по умолчанию "Независимый"
//  ИмяПараметраСсылка - Строка - если параметр передан, то в ПараметрыФормы после проведения документа объекта из ФормаВладелец
//                                     помещается ссылка на записанный документ.
//
Процедура ОткрытьФормуПослеПроверкиПроведенностиДокумента(ИмяФормы, ПараметрыФормы, ФормаВладелец, РежимОткрытияФормы = "Независимый", ИмяПараметраСсылка = "") Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиОткрытияФормыПослеПроверкиПроведенностиДокумента();
	ДополнительныеПараметры.ИмяФормы = ИмяФормы;
	ДополнительныеПараметры.ПараметрыФормы = ПараметрыФормы;
	ДополнительныеПараметры.ФормаВладелец = ФормаВладелец;
	ДополнительныеПараметры.ИмяПараметраСсылка = ИмяПараметраСсылка;
	
	Если ВРег(РежимОткрытияФормы) =  ВРег("Независимый") Тогда	
		ДополнительныеПараметры.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли  ВРег(РежимОткрытияФормы) = ВРег("БлокироватьОкноВладельца") Тогда
		ДополнительныеПараметры.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли  ВРег(РежимОткрытияФормы) =  ВРег("БлокироватьВесьИнтерфейс") Тогда
		ДополнительныеПараметры.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестное значение параметра %1';
								|en = 'Unknown value of the %1 parameter'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, "РежимОткрытияФормы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПослеПроверкиПроведенностиДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(ФормаВладелец, ОписаниеОповещения);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * ИмяПараметраСсылка -Строка - 
// * ФормаВладелец - ФормаКлиентскогоПриложения - Свойства:
// 		** Объект - ДокументОбъект - 
// * ПараметрыФормы - Структура - 
// * ИмяФормы - Строка -
Функция ДополнительныеПараметрыОбработкиОткрытияФормыПослеПроверкиПроведенностиДокумента()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФормы");
	ДополнительныеПараметры.Вставить("ПараметрыФормы");
	ДополнительныеПараметры.Вставить("ФормаВладелец");
	ДополнительныеПараметры.Вставить("ИмяПараметраСсылка");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции


// Проверяет модифицированность и проведенность документе. Если не проведен или модифицирован
// задает пользователю вопрос и проводит документ в форме. Затем выполняется оповещение.
// В результат выполняемого оповещения помещается ссылка на проведенный документ.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения 
//  Оповещение	 - ОписаниеОповещения 
//
Процедура ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(Форма, Оповещение) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
		Или Не Форма.Объект.Проведен
		Или Форма.Модифицированность Тогда
		
		ДополнительныеПараметры = Новый Структура("Оповещение, Форма", Оповещение, Форма);
		ОповещениеВопроса = Новый ОписаниеОповещения(
			"ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокументаЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо провести документ. Провести?';
							|en = 'Post the document to continue. Post?'");
		ПоказатьВопрос(ОповещениеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Форма.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеОбработчикиСобытий

// Универсальный обработчик изменения реквизитов
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма, где выполняется обработчик
//  ИмяРеквизита			 - Строка, Массив Из Строка	 - имя обрабатываемого реквизита
//  ТребуетсяВызовСервера	 - Булево			 - признак необходимости вызова сервера
//  ПараметрыОбработки		 - Структура		 - дополнительные параметры обработки
//
Процедура ПродолжитьИзменениеРеквизита(Форма, ИмяРеквизита = "", ТребуетсяВызовСервера = Ложь, Знач ПараметрыОбработки = Неопределено) Экспорт
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТребуетсяВызовСервера, ПараметрыОбработки", ТребуетсяВызовСервера, ПараметрыОбработки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииИзмененияРеквизитаЛокализации", Форма, ПараметрыОповещения);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяРеквизита);
	
КонецПроцедуры

// Универсальный обработчик команд формы
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма, где выполняется обработчик
//  ИмяКоманды				 - Строка, Массив	 - имя выполняемой команды
//  ТребуетсяВызовСервера	 - Булево			 - признак необходимости вызова сервера
//  ПараметрыОбработки		 - Структура		 - дополнительные параметры обработки
//
Процедура ПродолжитьВыполнениеКоманды(Форма, ИмяКоманды = "", ТребуетсяВызовСервера = Ложь, Знач ПараметрыОбработки = Неопределено) Экспорт
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТребуетсяВызовСервера, ПараметрыОбработки", ТребуетсяВызовСервера, ПараметрыОбработки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыЛокализации", Форма, ПараметрыОповещения);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяКоманды);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПериодомРегистрации

// Возвращает строковое представление периода.
//
// Параметры:
//  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
//  КалендарныйПериод - Строка - "Месяц" или "Квартал".
//
// Возвращаемое значение:
//  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации.
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") Экспорт
	
	Возврат ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод);
	
КонецФункции

// Увеличивает или уменьшает значение периода на одно значение.
//
// Параметры:
//  Направление                     - Число  - "1", если шагаем на следующий месяц, "-1", если шагаем в предыдущий месяц
//  СтандартнаяОбработка            - Булево - Признак стандартной обработки события
//  ПериодРегистрации               - Дата   - Переменная, в которую помещается значение следующего или предыдущего месяца
//  ПредставлениеПериодаРегистрации - Строка - Представление месяца ПериодаРегистрации.
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Выбирает период из списка возможных периодов.
//
// Параметры:
//  Элемент - ПолеФормы - Поле формы, в котором наступает событие "НачалоВыбора".
//  СтандартнаяОбработка - Булево     - Признак стандартной обработки события
//  ПериодРегистрации - Дата       - Переменная, в которую помещается выбранное значение
//  Форма - ФормаКлиентскогоПриложения - Управляемая форма, в которой происходит событие "Начало выбора"
//  ОповещениеОВыборе - ОписаниеОповещения - Описание оповещения о выборе периода
//  НачальноеЗначение - Дата - Начальная дата для выбора периода
//  КалендарныйПериод - Строка - "Месяц" или "Квартал" - шаг периода.
//
Процедура НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, Форма, ОповещениеОВыборе, НачальноеЗначение = Неопределено, КалендарныйПериод = "Месяц") Экспорт

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, НСтр("ru = 'ДФ=''yyyy''';
																				|en = 'DF=''yyyy'''")) + "..."));
	НачалоПериодаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если КалендарныйПериод = "Месяц" Тогда
		КоличествоПериодовВГоду = 12;
		КоличествоМесяцевВПериоде = 1;
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		КоличествоПериодовВГоду = 4;
		КоличествоМесяцевВПериоде = 3;
	КонецЕсли;
	
	Для Счетчик = 1 По КоличествоПериодовВГоду Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоПериодаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоПериодаЗаполнения, КалендарныйПериод));
		Если НачальноеЗначение = НачалоПериодаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоПериодаЗаполнения = ДобавитьМесяц(НачалоПериодаЗаполнения, КоличествоМесяцевВПериоде);
	КонецЦикла;
	
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, НСтр("ru = 'ДФ=''yyyy''';
																					|en = 'DF=''yyyy'''")) + "..."));
	
	ДополнительныеПараметры = ДополнительныеПараметрыВыбораПериодаРегистрации();
	ДополнительныеПараметры.Элемент = Элемент;
	ДополнительныеПараметры.СтандартнаяОбработка = СтандартнаяОбработка;
	ДополнительныеПараметры.ПериодРегистрации = ПериодРегистрации;
	ДополнительныеПараметры.Форма             = Форма;
	ДополнительныеПараметры.ОповещениеОВыборе = ОповещениеОВыборе;
	ДополнительныеПараметры.НачальноеЗначение = НачальноеЗначение;
	ДополнительныеПараметры.КалендарныйПериод = КалендарныйПериод;
	
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораПредставленияПериодаРегистрацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
КонецПроцедуры


// Возвращает доп. параметры выбора периода
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 		* КалендарныйПериод - Строка - "Месяц", "Квартал"
// 		* НачальноеЗначение  - Дата - 
// 		* ОповещениеОВыборе - ОписаниеОповещения - 
// 		* Форма - ФормаКлиентскогоПриложения - 
// 		* ПериодРегистрации - Дата -
// 		* СтандартнаяОбработка - Булево -
// 		* Элемент - ПолеФормы - 
Функция ДополнительныеПараметрыВыбораПериодаРегистрации()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка");
	ДополнительныеПараметры.Вставить("ПериодРегистрации");
	ДополнительныеПараметры.Вставить("Форма");
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе");
	ДополнительныеПараметры.Вставить("НачальноеЗначение");
	ДополнительныеПараметры.Вставить("КалендарныйПериод");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ВыбранныйЭлемент - ЭлементСпискаЗначений - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыВыбораПериодаРегистрации
Процедура НачалоВыбораПредставленияПериодаРегистрацииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДополнительныеПараметры.НачальноеЗначение) Тогда
		НачалоВыбораПредставленияПериодаРегистрации(
			ДополнительныеПараметры.Элемент, 
			ДополнительныеПараметры.СтандартнаяОбработка, 
			ДополнительныеПараметры.ПериодРегистрации,
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйЭлемент.Значение, 
			ДополнительныеПараметры.КалендарныйПериод);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПериодаИзСписка

Процедура ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора)
	
	Список = ОбщегоНазначенияУТКлиентСервер.ДоступныеЗначенияПериодаПоВидуПериода(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиВыбораПериода();
	ДополнительныеПараметры.Форма = Форма;
	ДополнительныеПараметры.Элемент = Элемент;
	ДополнительныеПараметры.ВидПериода = ВидПериода;
	ДополнительныеПараметры.НачалоПериода = НачалоПериода;
	ДополнительныеПараметры.Список = Список;
	ДополнительныеПараметры.ОбработчикВыбора = ОбработчикВыбора;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * ОбработчикВыбора - ОписаниеОповещения - 
// * Список - СписокЗначений - 
// * НачалоПериода - Дата -
// * ВидПериода - ПеречислениеСсылка.ДоступныеПериодыОтчета - 
// * Элемент - ПолеФормы - 
// * Форма - ФормаКлиентскогоПриложения - 
Функция ДополнительныеПараметрыОбработкиВыбораПериода()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма");
	ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры.Вставить("ВидПериода");
	ДополнительныеПараметры.Вставить("НачалоПериода");
	ДополнительныеПараметры.Вставить("Список");
	ДополнительныеПараметры.Вставить("ОбработчикВыбора");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Служебная процедура.
//
// Параметры:
// 	ВыбранныйПериод - ЭлементСпискаЗначений - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиВыбораПериода
Процедура ВыбратьПериодОтчетаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 Тогда
		ВыбратьПериодОтчета(ДополнительныеПараметры.Форма, 
							ДополнительныеПараметры.Элемент, 
							ДополнительныеПараметры.ВидПериода, 
							ВыбранныйПериод.Значение, 
							ДополнительныеПараметры.ОбработчикВыбора);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикВыбора, ВыбранныйПериод);
	
КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод.
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Описание
// 
// Параметры:
// 	ИмяДокумента - Строка -
//  Список - ТаблицаФормы - Таблица формы 
// Возвращаемое значение:
// 	Массив - Описание
Функция ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(ИмяДокумента, Список)
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	ПодходящиеДокументы = Новый Массив();
	
	Тип = Тип("ДокументСсылка." + ИмяДокумента);
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Список.ДанныеСтроки(Строка);
		
		Если ТипЗнч(ДанныеСтроки["Ссылка"]) = Тип Тогда
			ПодходящиеДокументы.Добавить(ДанныеСтроки["Ссылка"]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящиеДокументы;
	
КонецФункции

Процедура СоздатьДокумент(ХозяйственнаяОперация, ЗначенияЗаполнения, ИмяДокумента)
				
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
 	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

Процедура ПоказатьВопросНеВыбраноРаспоряжение(Параметры)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросНеВыбраноРаспоряжение", ЭтотОбъект, Параметры);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не выбрано распоряжение для оформления документа.
			|Для создания документа без распоряжения необходимо перейти в журнал ""%1"".';
			|en = 'Reference to register the document is not selected.
			|To create the document without reference, go to the ""%1"" log.'"),
		Параметры.СинонимЖурнала);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перейти в журнал';
												|en = 'Go to the log'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,Кнопки,
		,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Не выбрано распоряжение';
			|en = 'Reference is not selected'"));
	
КонецПроцедуры

Процедура ОбработатьВопросНеВыбраноРаспоряжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		
		ОткрытьЖурнал(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеВнутриТаблицы(Форма, Элемент)
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат Элемент.Родитель;
	ИначеЕсли ТипЗнч(Элемент.Родитель) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПолеВнутриТаблицы(Форма, Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

// Служебный метод
// 
// Параметры:
// 	Результат - Произвольный - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиОткрытияФормыПослеПроверкиПроведенностиДокумента
Процедура ОткрытьФормуПослеПроверкиПроведенностиДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяПараметраСсылка) Тогда
		ДокументСсылка = ДополнительныеПараметры.ФормаВладелец.Объект.Ссылка;
		
		ДополнительныеПараметры.ПараметрыФормы.Вставить(ДополнительныеПараметры.ИмяПараметраСсылка, ДокументСсылка);
	КонецЕсли;
	
	ОткрытьФорму(ДополнительныеПараметры.ИмяФормы,
				ДополнительныеПараметры.ПараметрыФормы,
				ДополнительныеПараметры.ФормаВладелец,
				,
				,
				,
				,
				ДополнительныеПараметры.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

Процедура ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ДокументПроведен = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		Попытка
			Форма = ДополнительныеПараметры.Форма; // РасширениеУправляемойФормыДляОбъектов
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НеВыполнятьПроверкуПередЗаписью") Тогда
				// Если есть этот реквизит, значит задействована механика записи через обработку оповещения
				// Т.е. эта процедура объект не запишет, и обработку оповещения будет выполнять фукнция ОбработатьЗаписьОбъектаВФорме
				ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДополнительныеПараметры.Оповещение);
			КонецЕсли;
			ДокументПроведен = Форма.Записать(ПараметрыЗаписи);
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа';
										|en = 'Failed to post document'"));
		КонецПопытки;
	КонецЕсли;
	
	Если ДокументПроведен Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДокументПроведен);
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор параметров способа определения себестоимости, 
// которые передаются между формами документа "Возврат товаров от клиента".
// 
// Возвращаемое значение:
// 	Структура - данные строк товаров:
// 		* СтрокиТаблицыТовары - Неопределено
//
Функция НоваяСтруктураТовары() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("СтрокиТаблицыТовары");
	Возврат Результат;
	
КонецФункции

// Функция-конструктор параметров способа определения себестоимости, 
// которые передаются между формами документа "Возврат товаров от клиента".
// 
// Возвращаемое значение:
// 	Структура - состав полей:
// * СебестоимостьВР                       - Число
// * СебестоимостьПР                       - Число
// * СебестоимостьРегл                     - Число
// * СебестоимостьБезНДС                   - Число
// * Себестоимость                         - Число 
// * ДатаЗаполненияСебестоимостиПоВидуЦены - Дата 
// * ВидЦеныСебестоимости                  - СправочникСсылка.ВидыЦен 
// * Идентификатор                         - Число
// * ДокументРеализации                    - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ОтчетОРозничныхПродажах -
// * СпособОпределенияСебестоимости        - ПеречислениеСсылка.СпособыОпределенияСебестоимости
//  
Функция НовыйЭлементМассивТовары() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("СпособОпределенияСебестоимости");
	Результат.Вставить("ДокументРеализации");
	Результат.Вставить("Идентификатор");
	
	Результат.Вставить("ВидЦеныСебестоимости");
	Результат.Вставить("ДатаЗаполненияСебестоимостиПоВидуЦены");
	Результат.Вставить("Себестоимость");
	Результат.Вставить("СебестоимостьБезНДС");
	
	Результат.Вставить("СебестоимостьРегл");
	Результат.Вставить("СебестоимостьПР");
	Результат.Вставить("СебестоимостьВР");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
