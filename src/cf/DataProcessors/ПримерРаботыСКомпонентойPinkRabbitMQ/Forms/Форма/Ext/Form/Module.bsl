&НаКлиенте
Перем Клиент, АдресВоВременномХранилище;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//пример для бесплатного https://www.cloudamqp.com/
	
	//Адрес = "flamingo-01.rmq.cloudamqp.com";
	//Порт = 5672;
	//Логин = "dcyuszes";
	//Пароль = "n1ka_691bexu6e27hhqrKUgwBuvJkxx";
	//ВиртуальныйХост = "dcyuszes";
	
	//Адрес             = "localhost";
	//Порт              = 5672;
	//Логин             = "guest";
	//Пароль            = "guest";  
	//ВиртуальныйХост   = "local";
	//ТочкаОбмена       = "Certificates";
	//КлючМаршрутизации = "DirNomenclatureCertificates";
	//ТекстСообщения    = "Test1";
	             
	Адрес             = "192.168.35.128";
	Порт              = 5672;
	Логин             = "ERP";
	Пароль            = "77766613";  
	ВиртуальныйХост   = "test";
	ТочкаОбмена       = "CertificatesTest";
	КлючМаршрутизации = "ScopeОfСertificates";
	ТекстСообщения    = "Test1";

	
КонецПроцедуры

#Область ПодключениеИнициализацияКомпоненты

&НаКлиенте
Процедура ПодключитьКомпонентуКлиент(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
	
	УстановитьВнешнююКомпоненту(АдресВоВременномХранилище);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
	АдресВоВременномХранилище,
	"BITERP",
	ТипВнешнейКомпоненты.Native); 
	Если КомпонентаПодключена Тогда
		Сообщить(НСтр("ru = 'Компонента подключена!'")); 
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКомпонентуКлиент(Отказ)
	
	Если Клиент = Неопределено Тогда
		Если Не ИнициализироватьКомпонентуКлиентСервер(Клиент) Тогда
			
			ПодключитьКомпонентуКлиент(Отказ);
			Отказ = ИнициализироватьКомпонентуКлиентСервер(Клиент);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Клиент;
КонецФункции

&НаСервере
Функция ПолучитьКомпонентуСервер(Отказ)
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер(Отказ);
		Отказ = ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СозданиеТочкиИОчереди(Команда)
	Отказ = Ложь;
	Если ИспользоватьКомпоненту = 0 Тогда
		СозданиеТочкиИОчередиКлиент(Отказ);
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		СозданиеТочкиИОчередиСервер(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеТочкиИОчередиКлиент(Отказ)
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент(Отказ);
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Этаформа, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура СозданиеТочкиИОчередиСервер(Отказ)
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер(Отказ);
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, ЭтаФорма, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	Отказ = Ложь;
	Если ИспользоватьКомпоненту = 0 Тогда
		ОтправитьСообщениеКлиент(Отказ, ТекстСообщения);
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ОтправитьСообщениеСервер(Отказ, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ОтправкаСообщения(Отказ, Сообщение)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		ОтправитьСообщениеКлиент(Отказ, Сообщение);
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ОтправитьСообщениеСервер(Отказ, Сообщение);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьСообщениеКлиент(Отказ, Сообщение)
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент(Отказ);
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма,Отказ, Сообщение);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеСервер(Отказ, Сообщение)
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер(Отказ);
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма, Отказ, Сообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщение(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		ПрочитатьСообщениеКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ПрочитатьСообщениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщениеКлиент()
	Отказ = Ложь;
	КлиентКомпоненты = ПолучитьКомпонентуКлиент(Отказ);
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщениеСервер()
	Отказ = Ложь;
	КлиентКомпоненты = ПолучитьКомпонентуСервер(Отказ);
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		ПроверитьПодключениеКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ПроверитьПодключениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКлиент()
	Отказ = Ложь;
	КлиентКомпоненты = ПолучитьКомпонентуКлиент(Отказ);
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеСервер()
	Отказ = Ложь;
	КлиентКомпоненты = ПолучитьКомпонентуСервер(Отказ);
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

#Область СлужебныеПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботаСRabbitMQ

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
				Форма.Адрес,
				Форма.Порт,
				Форма.Логин,
				Форма.Пароль,
				Форма.ВиртуальныйХост);   
				Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
			Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		Сообщить(СистемнаяОшибка);
	КонецПопытки;
	
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Форма, Отказ)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
			
		ТочкаОбмена = Форма.ТочкаОбмена;
		ИмяОчереди  = Форма.ИмяОчереди;
		
		КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
		Сообщить("Точки и очереди успешно созданы!");

	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		Сообщить(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
	КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, Форма,Отказ, Сообщение)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
		
		ТочкаОбмена    = Форма.ТочкаОбмена;
		ИмяОчереди     = Форма.ИмяОчереди;
		//ТекстСообщения = Форма.ТекстСообщения; 
		ТекстСообщения = Сообщение;
		КлючМаршрутизации = Форма.КлючМаршрутизации;
		КлиентКомпоненты.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь); 
			Сообщить("Сообщение успешно отправлено!");
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		Сообщить(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
		
		ИмяОчереди = Форма.ИмяОчереди;
		
		Попытка
		//	КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
				Форма.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
				ОбработкаПолученногоСообщения(ОтветноеСообщение);
			Иначе
				Форма.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Очередь пустая!'");
			КонецЕсли;
			Сообщить(ТекстСообщения);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			Сообщить(КлиентКомпоненты.GetLastError());
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		Сообщить(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры  

&НаСервереБезКонтекста
Процедура ОбработкаПолученногоСообщения(ОтветноеСообщение)
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(ОтветноеСообщение);
	Данные = СериализаторXDTO.ПрочитатьJSON(Чтение);
	Чтение.Закрыть();			
КонецПроцедуры
             
&НаКлиенте
Процедура ОтправитьОбъекты(Команда)
	TrierRabbitMQОбщийМодульВызовСервера.ОтправкаОбъектов(); 
	ОбщегоНазначенияКлиент.СообщитьПользователю("Объекты отправлены");
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеОбъектовОбщийМодуль(Команда)
	TrierRabbitMQОбщийМодульВызовСервера.ПолучениеОбъектов();
	ОбщегоНазначенияКлиент.СообщитьПользователю("Объекты получены");
КонецПроцедуры

#КонецОбласти

